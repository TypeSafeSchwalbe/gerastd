
mod prc

use std::internal::prc::*
use std::opt

target c {
    pub proc exit(code) {
        internal_exit(code)
        return panic("Exited!")
    }

    pub proc Process(program, arguments) { return {
        handle = internal_run(program, arguments),

        kill = |self| {
            internal_kill(self.handle)
            return self
        },

        await = |self| {
            internal_await(self.handle)
            return self
        },

        await_output = |self| {
            internal_await_stdout(self.handle)
            return self
        },

        await_eoutput = |self| {
            internal_await_stderr(self.handle)
            return self
        },

        output = |self| {
            return internal_read_stdout(self.handle)
        },

        eoutput = |self| {
            return internal_read_stderr(self.handle)
        },

        input = |self, text| {
            internal_write_stdin(self.handle, text)
            return self
        },

        inputln = |self, text| {
            internal_write_stdin(self.handle, text |> concat("\n"))
            return self
        },
        
        exit_code = |self| {
            var status = internal_status(self.handle)
            case !status.is_finished -> return #none unit
            else return #some status.exit_code
        },

        is_done = |self| {
            var status = internal_status(self.handle)
            return status.is_finished
        }
    } }
}