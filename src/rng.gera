
mod std::rng

use std::(math, str, time, iter)

var LCG_MULTIPLIER = 6364136223846793005
var LCG_INCREMENT = 1442695040888963407

pub proc Generator(seed) { return {
    state = seed,

    set_seed = |self, new_seed| {
        self.state = new_seed
    },

    next_int = |self| {
        var r = self.state
            * LCG_MULTIPLIER
            + LCG_INCREMENT
        self.state = r
        return r
    },

    next_flt = |self| {
        return as_flt(self .> next_int() |> math::abs())
            / as_flt(math::INT_MAX)
    },

    next_int_in = |self, min, max| {
        case min >= max
            -> "The minimum (_) is larger than or equal to the maximum (_)!"
                |> str::fmt([min |> as_str(), max |> as_str()])
                |> panic()
        var range = max - min + 1
        var r = self .> next_int() |> math::abs()
        case range <= 0 -> return r // this can only happen if the range is too big
        return min + r % range
    },

    next_flt_in = |self, min, max| {
        case min >= max
            -> "The minimum (_) is larger than or equal to the maximum (_)!"
                |> str::fmt([min |> as_str(), max |> as_str()])
                |> panic()
        var range = max - min
        var r = self .> next_flt()
        return min + r * range
    }
} }

var global_gen = {
    state = 0,
    seeded = false
}

proc init_global_gen() {
    case !global_gen.seeded -> {
        global_gen.state = time::now_local()
        global_gen.seeded = true
    }
}

pub proc rand_int() {
    init_global_gen()
    var r = global_gen.state
        * LCG_MULTIPLIER
        + LCG_INCREMENT
    global_gen.state = r
    return r
}

pub proc rand_flt() {
    init_global_gen()
    return as_flt(rand_int() |> math::abs())
        / as_flt(math::INT_MAX)
}

pub proc rand_int_in(min, max) {
    init_global_gen()
    case min >= max
        -> "The minimum (_) is larger than or equal to the maximum (_)!"
            |> str::fmt([min |> as_str(), max |> as_str()])
            |> panic()
    var range = max - min + 1
    var r = rand_int() |> math::abs()
    case range <= 0 -> return r // this can only happen if the range is too big
    return min + r % range
}

pub proc rand_flt_in(min, max) {
    init_global_gen()
    case min >= max
        -> "The minimum (_) is larger than or equal to the maximum (_)!"
            |> str::fmt([min |> as_str(), max |> as_str()])
            |> panic()
    var range = max - min
    var r = rand_flt()
    return min + r * range
}

pub proc rand_choice(array) {
    case length(array) == 0 -> panic("Array is empty!")
    var item = array[rand_int_in(0, length(array) - 1)]
    return item
}

pub proc rand_sample(array) {
    case length(array) == 0 -> panic("Array is empty!")
    return iter::repeat_over(|| array[rand_int_in(0, length(array) - 1)])
}