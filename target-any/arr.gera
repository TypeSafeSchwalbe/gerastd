
mod std::arr

use std::str
use std::iter
use std::vec
use std::opt

pub proc subarray(a, start, end) {
    mut var start_index = start
    case start < 0 -> start_index = length(a) + start
    mut var end_index = end
    case end < 0 -> end_index = length(a) + end
    case start_index > end_index -> {
        "the start index _ is larger than the end index _ (length of array is _)"
            |> str::format(start_index)
            |> str::format(end_index)
            |> str::format(a |> length())
            |> panic()
    }
    case start_index == end_index -> return []
    var dest_length = end_index - start_index
    var dest = array(a[start_index], dest_length)
    0..dest_length |> iter::for_each(|i| {
        dest[i] = a[start_index + i]
    })
    return dest
}

pub proc subarray_until(a, end_index) {
    return a |> subarray(0, end_index)
}

pub proc subarray_after(a, start_index) {
    return a |> subarray(start_index, a |> length())
}

pub proc clone(a) {
    return a |> subarray(0, a |> length())
}

pub proc fill(a, value) {
    0..length(a) |> iter::for_each(|i| {
        a[i] = value
    })
    return a
}

pub proc reverse(a) {
    0..(length(a) / 2) |> iter::for_each(|o| {
        var left = o
        var right = length(a) - 1 - o
        var old_left = a[left]
        a[left] = a[right]
        a[right] = old_left
    })
    return a
}

pub proc iter(a) {
    return 0..length(a)
        |> iter::map(|i| a[i])
}

pub proc collect(i) {
    var dest = vec::new()
    i |> iter::for_each(|e| dest |> vec::push(e))
    return dest.content
        |> subarray_until(dest.size)
}